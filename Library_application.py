# -*- coding: utf-8 -*-
"""Copy of 2021-12-10_Gagandeep_Project52

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hvbvaxdTGK3abdPBCXVUjI61PyMA7xGh

### Instructions

### Problem Statement 

In this project, create an interactive Library application using the concept of **Object Oriented Programming**. 

Ask the user to enter a number from 1, 2, 3, 4, or 9. These numbers indicate the following options: 

  - **1: Display books** $\Longrightarrow$ This option displays all books in the library.

  - **2: Lend a book** $\Longrightarrow$ This option allows the user to lend a book to another user.

  - **3: Add a book** $\Longrightarrow$ This option enables the user to add a new book to the library.

  - **4: Collect a book** $\Longrightarrow$ This option will collect the book back from the user.

  - **9: Quit** $\Longrightarrow$ This option will allow the user to quit the application.

---

### List of Activities

**Activity 1:** Create a `LibraryAdmin` class.

**Activity 2:** Create the following four functions inside the `LibraryAdmin` class:

 - `display_book()`: To display all the books.

 - `lend_book()`: To lend a book. 

 - `add_book()`: To add a new book.

 - `collect_book()`: To collect a book back.  

**Activity 3:** Create an object of `LibraryAdmin` class.

**Activity 4:** Call the functions.

---
"""

#  Create classÂ LibraryAdmin and add constructor
class LibraryAdmin:
  def __init__(self,list_books):
    list_books=list_books
    borrowers_dict={}

"""---

#### Activity 2: Add Functions

Add the following four functions inside the `LibraryAdmin` class:

- **The `display_books()` function**: Display all the books stored in the `list_books` list using `for` loop.

- **The `lend_book()` function**: This function takes two parameters; `book` and `borrower`. The `book` parameter holds the name of the book and the `borrower` parameter holds the name of the user to whom the book is to be lent. 

  Inside this function, check whether the `book` is already present in the `borrowers_dict` dictionary or not. 

  * If the `book` is not in `borrowers_dict{}`, update this dictionary using `update()` function. Pass the name of the book i.e. `book` variable as key and name of the user i.e. `borrower` variable as its `value` to the `update()` function.

  * If the `book` exists in `borrowers_dict{}`, this means that this book is already issued by another user. Thus, display the message "Sorry, this book is already issued".

- **The `add_book()` function**: This function takes a parameter `book` which holds the name of the book to be added to the library. Use the `append()` function to add the `book` to the `list_books` list. Also, display a message "Book has been successfully added in the Library".

- **The `collect_book()` function**: This function takes a parameter `book` which holds the name of the book to be removed from the `borrowers_dict` dictionary. Use the `pop()` function of the Python dictionary to remove the `book` from the `borrowers_dict` dictionary. Also, display a message "Book is successfully removed from the Library".

**Note:** Do not forget to keep `self` keyword as the first argument or parameter in all the class functions.
"""

# Create Functions inside 'Library' class.

class LibraryAdmin:
  def __init__(self,list_books):
    self.list_books=list_books
    self.borrowers_dict={} 
  def display_books(self):
    #print(self.list_books)
    for i in self.list_books:
      print(i)
  def lend_book(self,book,borrower):
    if book not in self.borrowers_dict.keys():
        self.borrowers_dict.update({book:borrower})
        print('Book issued')        
    else:
        print("Sorry, this book is already Issued")

  def add_book(self,book):
    self.list_books.append(book)
    print("Book is sucessfully added in library")

  def collect_book(self,book):
    if(book not in self.borrowers_dict.keys()):
      print(f"{book} is Not in Borrower Dict")
    else:
      self.borrowers_dict.pop(book)
      print(f"{book} is successfully removed from library")

"""---

#### Activity 3: Create an Object of `LibraryAdmin`

Create an object of `LibraryAdmin` class and pass a list as a parameter. This list consists of names of books that initially exist in your library.
"""

# Create an object of Library class and pass a list of books as a parameter
demo=LibraryAdmin(['C','Python','OOPs'])

"""---

#### Activity 4: Call the Functions

Create an infinite `while` loop. Inside this `while` loop perform the following tasks:
1. Display the following list of choices:

```
Enter :
        1 to DISPLAY books
        2 to LEND a book
        3 to ADD a book
        4 to COLLECT a book
        9 to QUIT the application
```

2. Take user input and store it in a variable `user_choice`. Check whether the user entered any input other than 1, 2, 3, 4, or 9. If yes, then display a message "Please enter a valid option" and keep on asking for user input unless the user enters a valid choice.

3. Now using the `if-elif-else` statement, check user input and call the corresponding functions using the object of the `LibraryAdmin` class.
 - If `user_choice==1`, call the `display_books()` function 
 - If `user_choice==2`, ask the user to enter the name of the book which is to be lent and the name of the borrower and pass them as parameters to the `lend_book()` function.
 - If `user_choice==3`, ask the user to enter the name of the book which is to be added and pass this as a parameter to the `add_book()` function.
 - If `user_choice==4`, ask the user to enter the name of the book which is to be collected back and pass this as a parameter to the `collect_book()` function.
 - If `user_choice==9`, break the infinite while loop using the `break` statement.


**Note:** Call all the four functions using the object of `LibraryAdmin` class only.
"""

# Call the functions
demo=LibraryAdmin(['C','Python','OOPs','java'])
while True:
  print('Enter:\n\t1 to Display Books.\n\t2 to lend a Book\n\t3 to add a book.\n\t4 to collect a Book.\n\t9 to quit the application. ')
  user_choice=int(input())
  if(user_choice  not in [1,2,3,4,9]):
    print('Please enter valid Input')
  if(user_choice==1):
    demo.display_books()
  elif(user_choice==2):
    book = input("Enter the name of the book to be lent:\n")
    borrower = input("Enter the name of the borrower:\n")
    demo.lend_book(book,borrower)
  elif(user_choice==3):
    book = input("Enter the name of the book you want to add:\n")
    demo.add_book(book)
  elif(user_choice==4):
    book = input("Enter the name of the book to be collected:\n")
    demo.collect_book(book)
  elif(user_choice==9):
    break

"""---"""